{
    "Parameters": {
        "VpcIpBlock": {
            "Description": "CIDR block for the VPC",
            "Type": "String",
            "Default": "10.117.128.0/18"
        },
        "Subnet1IpBlock": {
            "Description": "CIDR block for the first subnet",
            "Type": "String",
            "Default": "10.117.128.31/27"
        },
        "Subnet2IpBlock": {
            "Description": "CIDR block for the second subnet",
            "Type": "String",
            "Default": "10.117.128.63/27"
        },
        "Subnet3IpBlock": {
            "Description": "CIDR block for the third subnet",
            "Type": "String",
            "Default": "10.117.128.95/27"
        },
        "CacheNodeType": {
            "Description": "The instance type for cache nodes",
            "Type": "String",
            "Default": "cache.t1.micro"
        },
        "CacheNodePort": {
            "Description": "The port that each cache cluster node will listen on",
            "Type": "Number",
            "Default": "6379"
        },
        "CacheClusterSize": {
            "Description": "The number of cache nodes in the cache cluster",
            "Type": "Number",
            "Default": "1"
        },
        "CacheClusterName": {
            "Description": "The name of the cache cluster",
            "Type": "String",
            "Default": "redcc"
        },
        "DatabaseStorageInGB": {
            "Description": "The allocated storage size specified in gigabytes of the database",
            "Type": "Number",
            "Default": 5
        },
        "DatabaseProvisionedIops": {
            "Description": "The provisioned IOPS (ops per second). If used, must be exactly 10 times DatabaseStorageInGB",
            "Type": "String",
            "Default": "none"
        },
        "DatabaseInstanceClass": {
            "Description": "The name of the compute and memory capacity class of the DB instance",
            "Type": "String",
            "Default": "db.t1.micro"
        },
        "DatabaseName": {
            "Description": "The name of the database instance",
            "Type": "String",
            "Default": "mysqlInstance"
        },
        "DatabaseUsername": {
            "Description": "The username of the master database user",
            "Type": "String",
            "Default": "DatabaseUsername"
        },
        "DatabasePassword": {
            "Description": "The password of the master database user",
            "Type": "String",
            "NoEcho": "true",
            "Default": "DatabasePassword"
        },
        "DatabasePort": {
            "Description": "The DB port",
            "Type": "Number",
            "Default": 3306
        },
        "DBSnapshotIdentifier": {
            "Description": "The snapshot to use when creating the db",
            "Type": "String",
            "Default": ""
        },
        "DatabaseReadReplicaPort": {
            "Description": "The DB port for the read replica",
            "Type": "Number",
            "Default": 5802
        },
        "CreateDatabaseReadReplica": {
            "Description": "Whether or not to create a DB read replica",
            "Type": "String",
            "Default": "false"
        },
        "UseCacheReplicationGroup": {
            "Description": "Whether or not the cache will use a Replication Group. If set to true, the ReplicationGroupId that should be used for the Replication Group will be returned as output.",
            "Type": "String",
            "Default": "false"
        },
        "DatabaseBackupRetentionPeriod": {
            "Description": "The number of days for which automatic DB snapshots are retained",
            "Type": "Number",
            "Default": 30
        },
        "DatabaseMultiAvailabilityZones": {
            "Description": "Whether or not to deploy the database across multiple Availability Zones. If used, DatabaseAvailabilityZone is ignored",
            "Type": "String",
            "Default": "false"
        },
        "DatabaseAvailabilityZone": {
            "Description": "Whether or not to deploy the database across multiple Availability Zones",
            "Type": "String",
            "Default": "us-east-1a"
        },
        "NotificationEmailAddress": {
            "Description": "An email address (or alias) that will be notified when events (such as autoscaling) about the environment are sourced",
            "Type": "String",
            "Default": "none"
        }
    },
    "Conditions": {
        "UseProvisionedIopsCondition": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "DatabaseProvisionedIops"
                        },
                        "none"
                    ]
                }
            ]
        },
        "CreateDatabaseReadReplicaCondition": {
            "Fn::Equals": [
                {
                    "Ref": "CreateDatabaseReadReplica"
                },
                "true"
            ]
        },
        "UseCacheReplicationGroupCondition": {
            "Fn::Equals": [
                {
                    "Ref": "UseCacheReplicationGroup"
                },
                "true"
            ]
        },
        "DatabaseMultiAvailabilityZonesCondition": {
            "Fn::Equals": [
                {
                    "Ref": "DatabaseMultiAvailabilityZones"
                },
                "true"
            ]
        },
        "NotificationEmailAddressCondition": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "NotificationEmailAddress"
                        },
                        "none"
                    ]
                }
            ]
        }
    },
    "Outputs": {
        "VpcId": {
            "Value": {
                "Ref": "Vpc"
            }
        },
        "Subnets": {
            "Value": {
                "Fn::Join": [
                    ",",
                    [
                        {
                            "Ref": "Subnet1"
                        },
                        {
                            "Ref": "Subnet2"
                        },
                        {
                            "Ref": "Subnet3"
                        }
                    ]
                ]
            }
        },
        "InstanceProfileArn": {
            "Value": {
                "Fn::GetAtt": [
                    "ServerInstanceProfile",
                    "Arn"
                ]
            }
        },
        "ServerRoleArn": {
            "Value": {
                "Fn::GetAtt": [
                    "ServerRole",
                    "Arn"
                ]
            }
        },
        "DatabaseEndpointAddress": {
            "Value": {
                "Fn::GetAtt": [
                    "Database",
                    "Endpoint.Address"
                ]
            }
        },
        "DatabaseEndpointPort": {
            "Value": {
                "Fn::GetAtt": [
                    "Database",
                    "Endpoint.Port"
                ]
            }
        },
        "DatabaseUsername": {
            "Value": {
                "Ref": "DatabaseUsername"
            }
        },
        "DatabasePassword": {
            "Value": {
                "Ref": "DatabasePassword"
            }
        },
        "ReplicaDatabaseEndpointAddress": {
            "Value": {
                "Fn::GetAtt": [
                    "DatabaseReadReplica",
                    "Endpoint.Address"
                ]
            },
            "Condition": "CreateDatabaseReadReplicaCondition"
        },
        "ReplicaDatabaseEndpointPort": {
            "Value": {
                "Fn::GetAtt": [
                    "DatabaseReadReplica",
                    "Endpoint.Port"
                ]
            },
            "Condition": "CreateDatabaseReadReplicaCondition"
        },
        "GameServerSecurityGroupId": {
            "Value": {
                "Ref": "GameServerSecurityGroup"
            }
        },
        "CacheSecurityGroupId": {
            "Value": {
                "Ref": "CacheSecurityGroup"
            }
        },
        "DatabaseSecurityGroupId": {
            "Value": {
                "Ref": "DatabaseSecurityGroup"
            }
        },
        "ElbSecurityGroupId": {
            "Value": {
                "Ref": "ElbSecurityGroup"
            }
        },
        "NotificationTopicArn": {
            "Value": {
                "Ref": "NotificationTopic"
            },
            "Condition": "NotificationEmailAddressCondition"
        },
        "CacheClusterId": {
            "Value": {
                "Ref": "CacheCluster"
            }
        },
        "ReplicationGroupId": {
            "Condition": "UseCacheReplicationGroupCondition",
            "Value": {
                "Fn::Join": [
                    "-",
                    [
                        {"Ref": "CacheClusterName"},
                        {"Ref":"AWS::StackName"}
                    ]
                ]
            }
        }
    },
    "Resources": {
        "S3Bucket" : {
          "Type" : "AWS::S3::Bucket",
          "Properties" : {
             "AccessControl" : "Private",
             "BucketName" : {
                "Fn::Join": [
                    ".",
                    [
                        {"Ref":"AWS::StackName"},
                        "yourdomain.com"
                    ]
                ]
             }
          },
          "DeletionPolicy" : "Delete"
        },
        "NotificationTopic": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
                "DisplayName": {
                    "Fn::Join": [
                        " ",
                        [
                            "AWS event from environment",
                            {
                                "Ref": "AWS::StackName"
                            }
                        ]
                    ]
                },
                "TopicName": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "AWS::StackName"
                            },
                            "notifications"
                        ]
                    ]
                },
                "Subscription": [
                    {
                        "Fn::If": [
                            "NotificationEmailAddressCondition",
                            {
                                "Protocol": "email",
                                "Endpoint": {
                                    "Ref": "NotificationEmailAddress"
                                }
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    }
                ]
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    }
                ]
            }
        },
        "InternetGatewayAttachment": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                },
                "VpcId": {
                    "Ref": "Vpc"
                }
            }
        },
        "Vpc": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": {
                    "Ref": "VpcIpBlock"
                },
                "EnableDnsSupport": true,
                "EnableDnsHostnames": true,
                "InstanceTenancy": "default",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    }
                ]
            }
        },
        "RouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    }
                ]
            }
        },
        "Route": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "InternetGateway",
            "Properties": {
                "RouteTableId": {
                    "Ref": "RouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "Subnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        "0",
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "CidrBlock": {
                    "Ref": "Subnet1IpBlock"
                },
                "VpcId": {
                    "Ref": "Vpc"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    " (",
                                    {
                                        "Fn::Select": [
                                            "0",
                                            {
                                                "Fn::GetAZs": {
                                                    "Ref": "AWS::Region"
                                                }
                                            }
                                        ]
                                    },
                                    ")"
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "Subnet1RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "RouteTable"
                },
                "SubnetId": {
                    "Ref": "Subnet1"
                }
            }
        },
        "Subnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        "1",
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "CidrBlock": {
                    "Ref": "Subnet2IpBlock"
                },
                "VpcId": {
                    "Ref": "Vpc"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    " (",
                                    {
                                        "Fn::Select": [
                                            "1",
                                            {
                                                "Fn::GetAZs": {
                                                    "Ref": "AWS::Region"
                                                }
                                            }
                                        ]
                                    },
                                    ")"
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "Subnet2RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "RouteTable"
                },
                "SubnetId": {
                    "Ref": "Subnet2"
                }
            }
        },
        "Subnet3": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        "2",
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "CidrBlock": {
                    "Ref": "Subnet3IpBlock"
                },
                "VpcId": {
                    "Ref": "Vpc"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    " (",
                                    {
                                        "Fn::Select": [
                                            "2",
                                            {
                                                "Fn::GetAZs": {
                                                    "Ref": "AWS::Region"
                                                }
                                            }
                                        ]
                                    },
                                    ")"
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "Subnet3RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "RouteTable"
                },
                "SubnetId": {
                    "Ref": "Subnet3"
                }
            }
        },
        "ElbSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "SecurityGroupforELB",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "8080",
                        "ToPort": "8080",
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "VpcId": {
                    "Ref": "Vpc"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    "ELB (",
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    ")"
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "GameServerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "SecurityGroupforGameServer",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "0",
                        "ToPort": "65535",
                        "CidrIp": {
                            "Ref": "VpcIpBlock"
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "Vpc"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    "GameServer (",
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    ")"
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "CacheSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "SecurityGroupfortheRediscache.AllowsanyserverintheVPCtoconnect.",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": {
                            "Ref": "CacheNodePort"
                        },
                        "ToPort": {
                            "Ref": "CacheNodePort"
                        },
                        "CidrIp": {
                            "Ref": "VpcIpBlock"
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "Vpc"
                }
            }
        },
        "DatabaseSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "SecurityGroupfortheDatabase.AllowsanyserverintheVPCtoconnect.",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": {
                            "Ref": "DatabasePort"
                        },
                        "ToPort": {
                            "Ref": "DatabasePort"
                        },
                        "CidrIp": {
                            "Ref": "VpcIpBlock"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": {
                            "Ref": "DatabaseReadReplicaPort"
                        },
                        "ToPort": {
                            "Ref": "DatabaseReadReplicaPort"
                        },
                        "CidrIp": {
                            "Ref": "VpcIpBlock"
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "Vpc"
                }
            }
        },
        "ServerInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "ServerRole"
                    }
                ]
            },
            "DependsOn": "ServerRole"
        },
        "ServerRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "PermissionsPolicy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": "*",
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ],
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "ec2.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                }
            }
        },
        "CacheSubnetGroup": {
            "Type": "AWS::ElastiCache::SubnetGroup",
            "Properties": {
                "Description": "SubnetGroupfortheCacheCluster",
                "SubnetIds": [
                    {
                        "Ref": "Subnet1"
                    },
                    {
                        "Ref": "Subnet3"
                    },
                    {
                        "Ref": "Subnet3"
                    }
                ]
            }
        },
        "CacheCluster": {
            "Type": "AWS::ElastiCache::CacheCluster",
            "Properties": {
                "ClusterName": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "CacheClusterName"
                            },
                            {
                                "Ref": "AWS::StackName"
                            }
                        ]
                    ]
                },
                "Engine": "redis",
                "Port": {
                    "Ref": "CacheNodePort"
                },
                "CacheNodeType": {
                    "Ref": "CacheNodeType"
                },
                "NumCacheNodes": {
                    "Ref": "CacheClusterSize"
                },
                "CacheSubnetGroupName": {
                    "Ref": "CacheSubnetGroup"
                },
                "VpcSecurityGroupIds": [
                    {
                        "Fn::GetAtt": [
                            "CacheSecurityGroup",
                            "GroupId"
                        ]
                    }
                ]
            }
        },
        "DatabaseSubnetGroup": {
            "Type": "AWS::RDS::DBSubnetGroup",
            "Properties": {
                "DBSubnetGroupDescription": "SubnetGroupforthedatabase",
                "SubnetIds": [
                    {
                        "Ref": "Subnet1"
                    },
                    {
                        "Ref": "Subnet2"
                    },
                    {
                        "Ref": "Subnet3"
                    }
                ]
            }
        },
        "Database": {
            "Type": "AWS::RDS::DBInstance",
            "Properties": {
                "AllocatedStorage": {
                    "Ref": "DatabaseStorageInGB"
                },
                "BackupRetentionPeriod": {
                    "Ref": "DatabaseBackupRetentionPeriod"
                },
                "DBInstanceClass": {
                    "Ref": "DatabaseInstanceClass"
                },
                "DBInstanceIdentifier": {
                    "Fn::Join": [
                        "-",
                        [
                            "gar",
                            {
                                "Ref": "AWS::StackName"
                            }
                        ]
                    ]
                },
                "DBName": {
                    "Ref": "DatabaseName"
                },
                "DBSubnetGroupName": {
                    "Ref": "DatabaseSubnetGroup"
                },
                "Engine": "mysql",
                "Iops": {
                    "Fn::If": [
                        "UseProvisionedIopsCondition",
                        {
                            "Ref": "DatabaseProvisionedIops"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "MasterUsername": {
                    "Ref": "DatabaseUsername"
                },
                "MasterUserPassword": {
                    "Ref": "DatabasePassword"
                },
                "Port": {
                    "Ref": "DatabasePort"
                },
                "VPCSecurityGroups": [
                    {
                        "Ref": "DatabaseSecurityGroup"
                    }
                ],
                "MultiAZ": {
                    "Ref": "DatabaseMultiAvailabilityZones"
                },
                "AvailabilityZone": {
                    "Fn::If": [
                        "DatabaseMultiAvailabilityZonesCondition",
                        {
                            "Ref": "AWS::NoValue"
                        },
                        {
                            "Ref": "DatabaseAvailabilityZone"
                        }
                    ]
                },
                "DBSnapshotIdentifier": {
                    "Ref": "DBSnapshotIdentifier"
                }
            }
        },
        "DatabaseReadReplica": {
            "Type": "AWS::RDS::DBInstance",
            "Condition": "CreateDatabaseReadReplicaCondition",
            "Properties": {
                "SourceDBInstanceIdentifier": {
                    "Ref": "Database"
                },
                "Port": {
                    "Ref": "DatabaseReadReplicaPort"
                },
                "DBInstanceIdentifier": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "DatabaseName"
                            },
                            {
                                "Ref": "AWS::StackName"
                            },
                            "replica"
                        ]
                    ]
                }
            }
        }
    }
}