 {
    "Parameters": {
        "Environment": {
            "Description": "The environment to deploy services in",
            "Type": "String"
        },
        "SshKeyName": {
            "Description": "SSH Key for access to services",
            "Type": "String",
            "Default": "gar"
        },
        "Subnets": {
            "Description": "Comma separated list of subnets to deploy the services in",
            "Type": "CommaDelimitedList"
        },
        "InstanceProfileArn": {
            "Description": "ARN for the Service Instance Profile for the environment",
            "Type": "String"
        },
        "ServerRoleArn": {
            "Description": "ARN for the Service role",
            "Type": "String"
        },
        "GameServerSslCertificateId": {
            "Description": "ID of the SSL certificate to use to terminate SSL at the Game Server ELB.",
            "Type": "String"
        },
        "ElbSecurityGroupId": {
            "Description": "ID of the ELB security group",
            "Type": "String"
        },
        "BaseAmiId": {
            "Description": "Game Service AMI ID",
            "Type": "String"
        },
        "GameServerEbsOptimized": {
            "Description": "Whether or not GameServer will have optimized EBS volumes",
            "Type": "String",
            "Default": "false"
        },
        "GameServerInstanceMonitoring": {
            "Description": "Whether or not GameServer will have instance monitoring enabled",
            "Type": "String",
            "Default": "false"
        },
        "GameServerInstanceType": {
            "Description": "Instance type for GameServer instances",
            "Type": "String",
            "Default": "t2.micro"
        },
        "GameServerSecurityGroupId": {
            "Description": "Security group for GameServer instances",
            "Type": "String"
        },
        "DatabaseSecurityGroupId": {
            "Description": "Security group for database instances",
            "Type": "String"
        },
        "CacheSecurityGroupId": {
            "Description": "Security group for cache instances",
            "Type": "String"
        },
        "GameServerAsgInstanceCount": {
            "Description": "The desired number of GameServer instances that should be maintained by its AutoscalingGroup",
            "Type": "Number",
            "Default": "1"
        },
        "GameServerAsgMaxSize": {
            "Description": "The maximum number of GameServer instances that should be maintained by its AutoscalingGroup",
            "Type": "Number",
            "Default": "1"
        },
        "GameServerAsgMinSize": {
            "Description": "The minimum number of GameServer instances that should be maintained by its AutoscalingGroup",
            "Type": "Number",
            "Default": "1"
        },
        "NotificationTopicArn": {
            "Description": "The ARN for the topic that will receive autoscaling events for the services",
            "Type": "String",
            "Default": "none"
        },
        "DatabaseEndpointAddress":{
           "Description": "The database endpoint address",
           "Type": "String"
        },
        "DatabaseEndpointPort":{
           "Description": "The database endpoint address",
           "Type": "String"
        },
        "DatabaseUsername":{
           "Description": "The database username",
           "Type": "String"
        },
        "DatabasePassword":{
           "Description": "The database password",
           "Type": "String"
        },
        "ReplicaDatabaseEndpointAddress":{
           "Description": "The replica database endpoint address",
           "Type": "String",
           "Default":""
        },
        "ReplicaDatabaseEndpointPort":{
           "Description": "The replica database endpoint address",
           "Type": "String",
           "Default":""
        },
        "CacheClusterId":{
            "Description": "The ID of the Redis Cache cluster for the environment",
            "Type": "String"
        },
        "ReplicationGroupId":{
            "Description": "The ID of the Redis Replication Group from which the primary Redis endpoint should be queried. If this value exists, the Redis endpoint from this group should be used.",
            "Type": "String",
            "Default":""
        }
    },
    "Conditions": {
        "NotificationCondition": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "NotificationTopicArn"
                        },
                        "none"
                    ]
                }
            ]
        },
        "UseSSLOnGameServerCondition": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "GameServerSslCertificateId"
                        },
                        "none"
                    ]
                }
            ]
        }
    },
    "Resources": {
        "GameServerElbCname": {
            "Type": "AWS::Route53::RecordSet",
            "Properties": {
                "HostedZoneName": "yourdomain.com.",
                "Name": {
                    "Fn::Join": [
                        ".",
                        [
                            {
                                "Ref": "Environment"
                            },
                            "yourdomain.com"
                        ]
                    ]
                },
                "Type": "CNAME",
                "TTL": "900",
                "ResourceRecords": [
                    {
                        "Fn::GetAtt": [
                            "GameServerLoadBalancer",
                            "DNSName"
                        ]
                    }
                ]
            }
        },
        "GameServerLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "Subnets": {
                    "Ref": "Subnets"
                },
                "CrossZone": true,
                "SecurityGroups": [
                    {
                        "Ref": "ElbSecurityGroupId"
                    }
                ],
                "Listeners": [
                    {
                        "Fn::If": [
                            "UseSSLOnGameServerCondition",
                            {
                                "LoadBalancerPort": 8080,
                                "Protocol": "ssl",
                                "InstancePort": 8080,
                                "InstanceProtocol": "tcp",
                                "SSLCertificateId": {
                                    "Ref": "GameServerSslCertificateId"
                                }
                            },
                            {
                                "LoadBalancerPort": 8080,
                                "Protocol": "tcp",
                                "InstancePort": 8080,
                                "InstanceProtocol": "tcp"
                            }
                        ]
                    }
                ],
                "HealthCheck": {
                    "HealthyThreshold": 2,
                    "Interval": 10,
                    "Target": "TCP:8080",
                    "Timeout": 5,
                    "UnhealthyThreshold": 2
                }
            }
        },
        "GameServerGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "AvailabilityZones": [
                    {"Fn::Select": [
                        "0",
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]},
                    {"Fn::Select": [
                        "1",
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]},
                    {"Fn::Select": [
                        "2",
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]}
                ],
                "DesiredCapacity": {
                    "Ref": "GameServerAsgInstanceCount"
                },
                "Cooldown": "60",
                "HealthCheckGracePeriod": "300000",
                "HealthCheckType": "ELB",
                "LaunchConfigurationName": {
                    "Ref": "GameServerLaunchConfiguration"
                },
                "LoadBalancerNames": [
                    {
                        "Ref": "GameServerLoadBalancer"
                    }
                ],
                "MaxSize": {
                    "Ref": "GameServerAsgMaxSize"
                },
                "MinSize": {
                    "Ref": "GameServerAsgMinSize"
                },
                "VPCZoneIdentifier": {
                    "Ref": "Subnets"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "gar",
                        "PropagateAtLaunch":true
                    },
                    {
                        "Key": "app",
                        "Value": "gar-services",
                        "PropagateAtLaunch":true
                    },
                    {
                        "Key": "env",
                        "Value": {"Ref":"Environment"},
                        "PropagateAtLaunch":true
                    }
                ],
                "NotificationConfiguration": {
                    "Fn::If": [
                        "NotificationCondition",
                        {
                            "TopicARN": {
                                "Ref": "NotificationTopicArn"
                            },
                            "NotificationTypes": [
                                "autoscaling:EC2_INSTANCE_LAUNCH",
                                "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
                                "autoscaling:EC2_INSTANCE_TERMINATE",
                                "autoscaling:EC2_INSTANCE_TERMINATE_ERROR",
                                "autoscaling:TEST_NOTIFICATION"
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                }
            }
        },
        "GameServerLaunchConfiguration": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "AssociatePublicIpAddress": true,
                "EbsOptimized": {"Ref": "GameServerEbsOptimized"},
                "IamInstanceProfile": {"Ref": "InstanceProfileArn"},
                "ImageId": {"Ref": "BaseAmiId"},
                "InstanceMonitoring": {"Ref": "GameServerInstanceMonitoring"},
                "InstanceType": {"Ref": "GameServerInstanceType"},
                "KeyName": {"Ref": "SshKeyName"},
                "SecurityGroups": [{"Ref": "GameServerSecurityGroupId"}],
                "UserData": {"Fn::Base64": {"Fn::Join": ["",[
                    "DB_HOST=",{"Ref":"DatabaseEndpointAddress"},"\n",
                    "DB_PORT=",{"Ref":"DatabaseEndpointPort"},"\n",
                    "DB_USER=",{"Ref":"DatabaseUsername"},"\n",
                    "DB_PASSWORD=",{"Ref":"DatabasePassword"},"\n",
                    "DB_HOST_REP=",{"Ref":"ReplicaDatabaseEndpointAddress"},"\n",
                    "DB_PORT_REP=",{"Ref":"ReplicaDatabaseEndpointPort"},"\n",
                    "CACHE_CLUSTER_ID=",{"Ref":"CacheClusterId"},"\n",
                    "REPLICATION_GROUP_ID=",{"Ref":"ReplicationGroupId"},"\n",
                    "DB_NAME=gar","\n"
                ]]}}
            }
        }
    }
}